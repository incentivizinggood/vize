type Query {
	say: String!
	currentUser: User

	comment(id: ID!): Comment
	company(id: ID!): Company
	jobAd(id: ID!): JobAd
	review(id: ID!): Review
	salary(id: ID!): Salary
	user(id: ID!): User
	vote(id: ID!): Vote

	searchCompanies(
		searchText: String = ""
		pageNum: Int = 0
		pageSize: Int = 5
	): CompanyConnection!
	searchJobAds(pageNum: Int = 0, pageSize: Int = 5): JobAdConnection!

	wroteAReview: RewardStatus!
}

type Mutation {
	claimWroteAReview(
		phoneNumber: String!
		paymentMethod: PaymentMethod!
		howYouHeardAboutUs: String
	): RewardStatus!

	castVote(input: CastVoteInput!): CastVotePayload
}

input CastVoteInput {
	"True to vote positively or favorably. False to vote negatively. Null to remove a vote."
	isUpvote: Boolean
	subjectId: ID!
}

type CastVotePayload {
	vote: Vote
}

type CompanyConnection {
	nodes: [Company!]!
	totalCount: Int!
}

type JobAdConnection {
	nodes: [JobAd!]!
	totalCount: Int!
}

enum RewardStatus {
	CAN_EARN
	CAN_CLAIM
	CLAIMED
	INELIGIBLE
}

enum PaymentMethod {
	PAYPAL
	XOOM
}

"The kinds of things that can be commented on."
union CommentParent = Comment | Review

# WARNING: Comments have not been fully implemented yet. The code for them is a
# half done mess. Keep that in mind when working with it.
type Comment {
	id: ID!

	"What was said in this comment."
	content: String!
	"The date and time this was created."
	created: DateTime

	"The user who wrote this."
	author: User!
	"The thing this comment is about or the comment that this one is responding to."
	parent: CommentParent!
	"Responses to this comment."
	children(pageNum: Int = 0, pageSize: Int = 24): [Comment!]!
	"The votes cast on this comment."
	votes(pageNum: Int = 0, pageSize: Int = 24): [Vote!]!
}

type Company {
	id: ID!

	name: String!
	contactEmail: String!
	yearEstablished: Int
	numEmployees: String
	industry: String
	locations: [Location!]!
	contactPhoneNumber: String
	websiteURL: String
	descriptionOfCompany: String
	dateJoined: DateTime
	numFlags: Int

	# TODO: Move these fields into a ReviewStats type for better preformance and
	# code quality.
	avgStarRatings: StarRatings
	percentRecommended: Float
	avgNumMonthsWorked: Float

	"Reviews about this company."
	reviews(pageNum: Int = 0, pageSize: Int = 24): [Review!]!
	"Number of reviews about this company."
	numReviews: Int!
	"Advertisements for jobs at this company."
	jobAds(pageNum: Int = 0, pageSize: Int = 24): [JobAd!]!
	"Number of advertisements for jobs at this company."
	numJobAds: Int!
	"Salaries reported to be earned at this company."
	salaries(pageNum: Int = 0, pageSize: Int = 24): [Salary!]!
	"Number of salaries reported to be earned at this company."
	numSalaries: Int!
}

type JobAd {
	id: ID!

	jobTitle: String!
	locations: [Location!]!
	pesosPerHour: String! # TODO convert to unit aware system
	contractType: String!
	jobDescription: String!
	responsibilities: String!
	qualifications: String!
	"The date and time this was created."
	created: DateTime

	"The company that is hiring."
	company: Company!
}

type Review {
	id: ID!

	title: String!
	jobTitle: String!
	location: Location!
	numberOfMonthsWorked: Int!
	pros: String!
	cons: String!
	wouldRecommendToOtherJobSeekers: Boolean!
	starRatings: StarRatings!
	additionalComments: String
	"The date and time this was created."
	created: DateTime

	# TODO: Move these fields into a VoteStats type for better preformance and
	# code quality.
	upvotes: Int
	downvotes: Int

	# TODO: Add a field to let a users see if a review belongs to them.
	"The company being reviewed"
	company: Company!
	"Comments about this review."
	comments(pageNum: Int = 0, pageSize: Int = 24): [Comment!]!
	"The vote that the currently logged in user cast on this review."
	currentUserVote: Vote
}

type Salary {
	id: ID!

	jobTitle: String!
	location: Location!
	incomeType: String! # TODO change to enum
	incomeAmount: Float! # TODO convert to unit aware system
	"The date and time this was created."
	created: DateTime

	"The company that paid this salary."
	company: Company!
}

"The roles a user can play."
enum UserRole {
	WORKER
	COMPANY
	COMPANY_UNVERIFIED
}

type User {
	id: ID!
	"The user's username, as would be typed in the login field."
	username: String!

	"The user's role."
	role: UserRole!
	"The date and time this was created."
	created: DateTime!

	"The company that this user is administering. Will be null if this user does not or can not admin a company."
	company: Company
}

"The kinds of things that can be voted on."
union VoteSubject = Comment | Review

type Vote {
	id: ID!

	"True if this vote is positive or favorable. False if this vote is negative. Null if this vote is neutral or the author has not voted."
	isUpvote: Boolean

	"The user who cast this vote."
	author: User!
	"The thing voted on."
	subject: VoteSubject!
}

type Location {
	city: String!
	address: String!
	industrialHub: String
}

type StarRatings {
	healthAndSafety: Float!
	managerRelationship: Float!
	workEnvironment: Float!
	benefits: Float!
	overallSatisfaction: Float!
}

# Date and time serialized as a string in the ISO 8601 format.
# Provided by graphql-iso-date on npm.
scalar DateTime
