type Query {
	say: String!
	currentUser: User

	comment(id: ID!): Comment
	company(id: ID!): Company
	jobAd(id: ID!): JobAd
	jobApplication(id: ID!): JobApplication
	review(id: ID!): Review
	salary(id: ID!): Salary
	user(id: ID!): User
	vote(id: ID!): Vote

	resource(id: ID!): Resource
	resourceTopic(id: ID!): ResourceTopic
	resourceAuthor(id: ID!): ResourceAuthor

	highlightedResources(audienceType: String = "WORKERS"): [Resource!]!
	resourceTopics(audienceType: String = "WORKERS"): [ResourceTopic!]!

	searchResourcesByTopic(
		id: ID!
		searchText: String = ""
		pageNum: Int = 0
		pageSize: Int = 20
		audienceType: String = "WORKERS"
	): ResourceConnection!

	searchRecentResources(
		searchText: String = ""
		pageNum: Int = 0
		pageSize: Int = 20
		audienceType: String = "WORKERS"
	): ResourceConnection!

	searchCompanies(
		searchText: String = ""
		pageNum: Int = 0
		pageSize: Int = 20
	): CompanyConnection!

	companyNameSuggestions(
		"What the user has typed in so far for a company name."
		partialCompanyName: String!
		"Only suggest names of companies that have company profiles. Default is false."
		onlyCompaniesWithProfiles: Boolean
	): [String!]!

	searchJobAds(pageNum: Int = 0, pageSize: Int = 20): JobAdConnection!

	wroteAReview: RewardStatus!
}

type Mutation {
	claimWroteAReview(
		phoneNumber: String!
		paymentMethod: PaymentMethod!
	): RewardStatus!

	castVote(input: CastVoteInput!): CastVotePayload

	resourceLike(input: ResourceLikeInput!): ResourceLikePayload

	createCompany(input: CreateCompanyInput!): CreateCompanyPayload
	createReview(input: CreateReviewInput!): CreateReviewPayload
	createSalary(input: CreateSalaryInput!): CreateSalaryPayload
	createJobAd(input: CreateJobAdInput!): CreateJobAdPayload
	applyToJobAd(input: ApplyToJobAdInput!): ApplyToJobAdPayload

	flagReview(input: FlagReviewInput!): FlagReviewPayload
}

input FlagReviewInput {
	reviewId: ID!
	reason: String!
	explanation: String!
}

type FlagReviewPayload {
	success: Boolean
}

input CreateCompanyInput {
	name: String!
	contactEmail: String!
	yearEstablished: Int
	numEmployees: String
	industry: String
	locations: [LocationInput!]!
	contactPhoneNumber: String
	websiteURL: String
	descriptionOfCompany: String
}

input LocationInput {
	city: String!
	address: String!
	industrialHub: String
}

type CreateCompanyPayload {
	company: Company
}

input CreateReviewInput {
	companyName: String!
	reviewTitle: String!
	location: LocationInput!
	jobTitle: String!
	numberOfMonthsWorked: Float!
	contractType: ContractType!
	employmentStatus: EmploymentStatus!
	pros: String!
	cons: String!
	wouldRecommendToOtherJobSeekers: Boolean!
	healthAndSafety: Int!
	managerRelationship: Int!
	workEnvironment: Int!
	benefits: Int!
	overallSatisfaction: Int!
	additionalComments: String
	referredBy: String
}

type CreateReviewPayload {
	review: Review
}

input CreateSalaryInput {
	companyName: String!
	location: LocationInput!
	jobTitle: String!
	incomeType: IncomeType!
	"In units of pesos."
	incomeAmount: Float!
	gender: Gender
}

type CreateSalaryPayload {
	salary: Salary
}

enum ContractType {
	FULL_TIME
	PART_TIME
	INTERNSHIP
	TEMPORARY
	CONTRACTOR
}

enum EmploymentStatus {
	FORMER
	CURRENT
}

input CreateJobAdInput {
	jobTitle: String!
	locations: [LocationInput!]!
	"In units of pesos."
	salaryMin: Float!
	"In units of pesos."
	salaryMax: Float!
	salaryType: IncomeType!
	contractType: ContractType!
	jobDescription: String!
	responsibilities: String!
	qualifications: String!

	"The time of day that this job starts in the local time of the job site."
	startTime: String
	"The time of day that this job ends in the local time of the job site."
	endTime: String
	"The day of week that this job starts. (0 - 6; Sunday is 0)"
	startDay: Int
	"The day of week that this job ends. (0 - 6; Sunday is 0)"
	endDay: Int
}

type CreateJobAdPayload {
	jobAd: JobAd
}

input ApplyToJobAdInput {
	jobAdId: ID!
	jobTitle: String!
	companyId: String!
	numReviews: Int!
	fullName: String!
	email: String!
	phoneNumber: String!
	coverLetter: String
}

type ApplyToJobAdPayload {
	success: Boolean
}

input CastVoteInput {
	"True to vote positively or favorably. False to vote negatively. Null to remove a vote."
	isUpvote: Boolean
	subjectId: ID!
}

type CastVotePayload {
	vote: Vote
}

input ResourceLikeInput {
	resourceSlug: String!
	isResourceLiked: Boolean!
}

type ResourceLikePayload {
	resource: Resource
}

type ResourceConnection {
	nodes: [Resource!]!
	totalCount: Int!
}

type CompanyConnection {
	nodes: [Company!]!
	totalCount: Int!
}

type JobAdConnection {
	nodes: [JobAd!]!
	totalCount: Int!
}

enum RewardStatus {
	CAN_EARN
	CAN_CLAIM
	CLAIMED
	INELIGIBLE
}

enum PaymentMethod {
	PAYPAL
	XOOM
	SWAP
}

"The kinds of things that can be commented on."
union CommentParent = Comment | Review

# WARNING: Comments have not been fully implemented yet. The code for them is a
# half done mess. Keep that in mind when working with it.
type Comment {
	id: ID!

	"What was said in this comment."
	content: String!
	"The date and time this was created."
	created: DateTime

	"The user who wrote this."
	author: User!
	"The thing this comment is about or the comment that this one is responding to."
	parent: CommentParent!
	"Responses to this comment."
	children(pageNum: Int = 0, pageSize: Int = 24): [Comment!]!
	"The votes cast on this comment."
	votes(pageNum: Int = 0, pageSize: Int = 24): [Vote!]!
}

type Resource {
	id: ID!

	slug: String!
	title: String!
	subtitle: String
	body: String!
	resourceImageURL: String!
	topicName: String
	"Who the resource is intended for (EMPLOYERS or WORKERS)"
	audienceType: String!
	authorId: Int!
	"If an Resource is highlighted show it in the highlighted resources section"
	isHighlighted: Boolean!
	author: ResourceAuthor

	"The number of times an resource has been liked"
	numberOfLikes: Int!
	"A boolean for whether the current user has liked the resource or not"
	isLikedByCurrentUser: Boolean!
	publishDate: DateTime!
}

type ResourceAuthor {
	id: ID!

	authorName: String
	authorCompanyName: String
	authorImageURL: String
	"A short biography on the author"
	authorBio: String
	contactPhoneNumber: String
	contactEmail: String
	websiteURL: String
	"Location can either be an address or the city"
	location: String
}

type ResourceTopic {
	id: ID!

	topicName: String!
	iconImageURL: String!
	"Who the topic is intended for (EMPLOYERS or WORKERS)"
	audienceType: String!
}

type Company {
	id: ID!

	name: String!
	contactEmail: String!
	yearEstablished: Int
	numEmployees: String
	industry: String
	locations: [Location!]!
	contactPhoneNumber: String
	websiteURL: String
	descriptionOfCompany: String
	dateJoined: DateTime
	numFlags: Int

	# TODO: Move these fields into a ReviewStats type for better preformance and
	# code quality.
	avgStarRatings: StarRatings
	percentRecommended: Float
	avgNumMonthsWorked: Float

	"Reviews about this company."
	reviews(pageNum: Int = 0, pageSize: Int = 24): [Review!]!
	"Number of reviews about this company."
	numReviews: Int!
	"Advertisements for jobs at this company."
	jobAds(pageNum: Int = 0, pageSize: Int = 24): [JobAd!]!
	"Number of advertisements for jobs at this company."
	numJobAds: Int!
	"Salaries reported to be earned at this company."
	salaries(pageNum: Int = 0, pageSize: Int = 24): [Salary!]!
	"Number of salaries reported to be earned at this company."
	numSalaries: Int!
	"URL for the company icon image"
	companyIconURL: String

	salaryStats: [CompanySalaryStats!]!
}

type CompanySalaryStats {
	companyName: String!
	jobTitle: String!
	"In units of pesos."
	totalAvgPay: Float!
	"In units of pesos."
	totalMaxPay: Float!
	"In units of pesos."
	totalMinPay: Float!
	"The number of salaries for a specific job title at a company"
	numSalariesJobTitle: Int!
}

type JobAd {
	id: ID!

	jobTitle: String!
	locations: [Location!]!
	"In units of pesos."
	salaryMin: Float!
	"In units of pesos."
	salaryMax: Float!
	salaryType: IncomeType!
	contractType: String!
	jobDescription: String!
	responsibilities: String!
	qualifications: String!
	"The date and time this was created."
	created: DateTime

	"The time of day that this job starts."
	startTime: String
	"The time of day that this job ends."
	endTime: String
	"The day of week that this job starts. (0 - 6; Sunday is 0)"
	startDay: Int
	"The day of week that this job ends. (0 - 6; Sunday is 0)"
	endDay: Int

	"The company that is hiring."
	company: Company!
}

type JobApplication {
	id: ID!
	fullName: String!
	email: String!
	phoneNumber: String!
	coverLetter: String

	jobAd: JobAd!
	company: Company!
}

type Review {
	id: ID!

	title: String!
	jobTitle: String!
	location: Location!
	numberOfMonthsWorked: Int!
	contractType: String!
	employmentStatus: String!
	pros: String!
	cons: String!
	wouldRecommendToOtherJobSeekers: Boolean!
	starRatings: StarRatings!
	additionalComments: String
	"The date and time this was created."
	created: DateTime

	# TODO: Move these fields into a VoteStats type for better preformance and
	# code quality.
	upvotes: Int
	downvotes: Int

	# TODO: Add a field to let a users see if a review belongs to them.
	"The company being reviewed"
	company: Company
	"Comments about this review."
	comments(pageNum: Int = 0, pageSize: Int = 24): [Comment!]!
	"The vote that the currently logged in user cast on this review."
	currentUserVote: Vote
}

enum IncomeType {
	YEARLY_SALARY
	MONTHLY_SALARY
	WEEKLY_SALARY
	DAILY_SALARY
	HOURLY_WAGE
}

enum Gender {
	MALE
	FEMALE
}

type Salary {
	id: ID!

	jobTitle: String!
	location: Location!
	incomeType: IncomeType!
	"In units of pesos."
	incomeAmount: Float! # TODO convert to unit aware system
	"The date and time this was created."
	created: DateTime

	"The company that paid this salary."
	company: Company
}

"The roles a user can play."
enum UserRole {
	WORKER
	COMPANY
	COMPANY_UNVERIFIED
}

type User {
	id: ID!
	"The user's username, as would be typed in the login field."
	username: String

	"The user's role."
	role: UserRole!

	"The company that this user is administering. Will be null if this user does not or can not admin a company."
	company: Company
}

"The kinds of things that can be voted on."
union VoteSubject = Comment | Review

type Vote {
	id: ID!

	"True if this vote is positive or favorable. False if this vote is negative. Null if this vote is neutral or the author has not voted."
	isUpvote: Boolean

	"The user who cast this vote."
	author: User!
	"The thing voted on."
	subject: VoteSubject!
}

type Location {
	city: String
	address: String
	industrialHub: String
}

type StarRatings {
	healthAndSafety: Float!
	managerRelationship: Float!
	workEnvironment: Float!
	benefits: Float!
	overallSatisfaction: Float!
}

# Date and time serialized as a String in the ISO 8601 format.
# Provided by graphql-iso-date on npm.
scalar DateTime
